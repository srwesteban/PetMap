#define TINY_GSM_MODEM_SIM7600  // A7670's AT instruction is compatible with SIM7600

#include <Arduino.h>
#include <TinyGPS++.h>
#include <TinyGsmClient.h>
#include <Wire.h>

#ifndef SerialAT
#define SerialAT Serial1
#endif

#ifndef SerialGPS
#define SerialGPS Serial2
#endif

#define MODEM_BAUDRATE                      (115200)
#define MODEM_DTR_PIN                       (25)
#define MODEM_TX_PIN                        (26)
#define MODEM_RX_PIN                        (27)
#define MODEM_PWRKEY_PIN                    (4)
#define BOARD_PWRON_PIN                     (12)
#define MODEM_RING_PIN                      (33)
#define MODEM_RESET_PIN                     (5)
#define BOARD_MISO_PIN                      (2)
#define BOARD_MOSI_PIN                      (15)
#define BOARD_SCK_PIN                       (14)
#define BOARD_SD_CS_PIN                     (13)
#define BOARD_BAT_ADC_PIN                   (35)
#define BOARD_GPS_TX_PIN                    21
#define BOARD_GPS_RX_PIN                    22
#define BOARD_GPS_PPS_PIN                   23
#define BOARD_GPS_WAKEUP_PIN                19

#define SerialMon Serial
#define SerialAT Serial1


#define TINY_GSM_DEBUG SerialMon

#define TINY_GSM_USE_GPRS true
#define TINY_GSM_USE_WIFI false

#define GSM_PIN ""  // PIN de la tarjeta SIM, si es necesario
const char apn[] = "internet.comcel.com.co";  // APN de tu operador móvil
const char gprsUser[] = "comcel";  // Nombre de usuario GPRS, si es necesario
const char gprsPass[] = "comcel";  // Contraseña de usuario GPRS, si es necesario

TinyGsm modem(SerialAT);
TinyGsmClient client(modem);

TinyGPSPlus gps;
bool messageSent = false;      // Variable para controlar si el mensaje ya se envió
bool messageReceived = false;  // Variable para controlar si se ha recibido un mensaje
bool locationPrinted = false;
String locationData;

void setup() {
  SerialMon.begin(115200);
  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX_PIN, MODEM_TX_PIN);
  SerialGPS.begin(9600, SERIAL_8N1, BOARD_GPS_RX_PIN, BOARD_GPS_TX_PIN);

  pinMode(MODEM_PWRKEY_PIN, OUTPUT);
  pinMode(BOARD_PWRON_PIN, OUTPUT);

  digitalWrite(MODEM_PWRKEY_PIN, LOW);
  delay(1000);
  digitalWrite(MODEM_PWRKEY_PIN, HIGH);
  delay(1000);
  digitalWrite(MODEM_PWRKEY_PIN, LOW);

  delay(3000);

  SerialMon.println("Conectando al módulo GSM...");

  if (!modem.init()) {
    SerialMon.println("Fallo al inicializar el módulo GSM");
    while (true);
  }

  if (strlen(GSM_PIN) > 0) {
    if (modem.simUnlock(GSM_PIN)) {
      SerialMon.println("Tarjeta SIM desbloqueada");
    } else {
      SerialMon.println("Fallo al desbloquear la tarjeta SIM");
      while (true);
    }
  }

  SerialMon.print("Conectando a la red...");
  if (!modem.waitForNetwork()) {
    SerialMon.println("Fallo al conectarse a la red");
    while (true);
  }

  SerialMon.println("Conexión exitosa a la red");

  SerialMon.print("Conectando al servicio GPRS...");
  if (modem.gprsConnect(apn, gprsUser, gprsPass)) {
    SerialMon.println("Conexión exitosa al servicio GPRS");
  } else {
    SerialMon.println("Fallo al conectar al servicio GPRS");
    while (true);
  }
  SerialMon.println("Listo para recibir mensajes");
}

void loop() {
  coordenadas();
  readUnreadSMS();
  
  if (messageReceived) {
    enviarSMS();
  }
  
  delay(10000); // Espera 10 segundos antes de repetir
}

void readUnreadSMS() {
  SerialAT.println("AT+CMGL=\"REC UNREAD\"");

  while (SerialAT.available()) {
    String response = SerialAT.readStringUntil('\n');
    if (response.startsWith("+CMGL:")) {
      String sender = SerialAT.readStringUntil(',');
      Serial.println("Mensaje: " + sender);
      messageReceived = true;  // Marcar que se ha recibido un mensaje
    }
  }
}

void enviarSMS() {
  if (!messageSent) {
    String destinationNumber = "+573215098953";
    String message = locationData;

    SerialMon.println("Enviando mensaje...");
    if (modem.sendSMS(destinationNumber, message)) {
      SerialMon.println("Mensaje enviado con éxito");
    } else {
      SerialMon.println("Error al enviar el mensaje");
    }
    
    messageSent = true;  // Marcamos que el mensaje se ha enviado
  }
  
  // Detenemos el bucle loop
  while (true);
}

void coordenadas(){

  if (!locationPrinted) {
        while (SerialGPS.available()) {
            int c = SerialGPS.read();
            if (gps.encode(c)) {
                if (gps.location.isValid()) {
                    locationData = String(gps.location.lat(), 6) + "," + String(gps.location.lng(), 6);
                    locationPrinted = true;
                    break; // Salir del bucle
                }
            }
        }
    }

    if (SerialAT.available()) {
        Serial.write(SerialAT.read());
    }
    if (Serial.available()) {
        SerialAT.write(Serial.read());
    }
}
